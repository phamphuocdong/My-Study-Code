AWSTemplateFormatVersion: 2010-09-09
Description: Task D CloudFormation template


Parameters:

  TaskDVpcCidr:
    Type: String
    Default: 10.2.0.0/16

  PublicSubnet1Cidr:
    Type: String
    Default: 10.2.0.0/24

  PublicSubnet2Cidr:
    Type: String
    Default: 10.2.1.0/24
  
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.2.2.0/24
  
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.2.3.0/24

  AmazonLinuxAMIID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  DbUsername:
    Type: String
    Default: dong

  DbUserPassword:
    Type: String
    Default: rmitstudent

  DbName:
    Type: String
    Default: student

  KeyPair:
    Type: String
    Default: vockey

  InstanceProfileName:
    Type: String
    Default: LabInstanceProfile

  InstanceProfileArn:
    Type: String
    Default: arn:aws:iam::113990101808:instance-profile/LabInstanceProfile

Resources:

##############################
# Environment for web server #
##############################
  # VPC
  TaskDVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref TaskDVpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: TaskD VPC

  #Internet Gateway
  TaskDIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: TaskD IGW

  #Attach internet gateway to VPC
  VPCtoIGWConnection:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - TaskDIGW
      - TaskDVPC
    Properties:
      InternetGatewayId: !Ref TaskDIGW
      VpcId: !Ref TaskDVPC

  # Public Route Table
  TaskDPublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: TaskDVPC
    Properties:
      VpcId: !Ref TaskDVPC
      Tags:
        - Key: Name
          Value: TaskD Public Route Table

  #Route internet traffic to internet gateway
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - TaskDPublicRouteTable
      - TaskDIGW
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref TaskDIGW
      RouteTableId: !Ref TaskDPublicRouteTable

  #Public subnet 1
  TaskDPublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: TaskDVPC
    Properties:
      VpcId: !Ref TaskDVPC
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: TaskD Public Subnet 1

  #Public subnet 2
  TaskDPublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: TaskDVPC
    Properties:
      VpcId: !Ref TaskDVPC
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: TaskD Public Subnet 2

  # Associate public subnet 1 to the Public Route Table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - TaskDPublicRouteTable
      - TaskDPublicSubnet1
    Properties:
      SubnetId: !Ref TaskDPublicSubnet1
      RouteTableId: !Ref TaskDPublicRouteTable

  # Associate public subnet 2 to the Public Route Table
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - TaskDPublicRouteTable
      - TaskDPublicSubnet2
    Properties:
      SubnetId: !Ref TaskDPublicSubnet2
      RouteTableId: !Ref TaskDPublicRouteTable      

# Dynamic web server Security Group
  TaskDWebsiteSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: TaskDVPC
    Properties:
      GroupName: TaskD Web SG
      GroupDescription: Enable access to Website
      VpcId: !Ref TaskDVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: TaskD Web SG

  ################################
  # Environment for rds instance #
  ################################

  #'ec2' Create security group for rds db and open port for mysql connection 3306
  TaskDVPCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: TaskDVPC
    Properties:
      GroupName: TaskD RDS SG
      GroupDescription: Enable access to database for resources in TaskDWebsiteSecurityGroup
      VpcId: !Ref TaskDVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref TaskDWebsiteSecurityGroup
      Tags:
        - Key: Name
          Value: TaskD RDS SG

  #Private subnet 1
  TaskDPrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: TaskDVPC
    Properties:
      VpcId: !Ref TaskDVPC
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: TaskD Private Subnet 1

  #Private subnet 2
  TaskDPrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: TaskDVPC
    Properties:
      VpcId: !Ref TaskDVPC
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: TaskD Private Subnet 2

  # Private Route Table
  TaskDPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: TaskDVPC
    Properties:
      VpcId: !Ref TaskDVPC
      Tags:
        - Key: Name
          Value: TaskD Private Route Table

  # Associate private subnet 1 to the Private Route Table
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - TaskDPrivateRouteTable
      - TaskDPrivateSubnet1
    Properties:
      SubnetId: !Ref TaskDPrivateSubnet1
      RouteTableId: !Ref TaskDPrivateRouteTable

  # Associate private subnet 2 to the Private Route Table
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - TaskDPrivateRouteTable
      - TaskDPrivateSubnet2
    Properties:
      SubnetId: !Ref TaskDPrivateSubnet2
      RouteTableId: !Ref TaskDPrivateRouteTable   

  # Db subnet group
  TaskDRdsSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    DependsOn:
      - TaskDPrivateSubnet1
      - TaskDPrivateSubnet2
    Properties: 
      DBSubnetGroupDescription: TaskD Rds Subnet Group
      SubnetIds: 
        - !Ref TaskDPrivateSubnet1
        - !Ref TaskDPrivateSubnet2
      Tags:
        - Key: Name
          Value: TaskD RDS Db Subnet Group

  #RDS instance
  TaskDRdsInstance:
    Type: AWS::RDS::DBInstance
    DependsOn:
      - TaskDRdsSubnetGroup
      - TaskDVPCSecurityGroup
    Properties:
        DBInstanceIdentifier: taskd-rds-instance
        AllocatedStorage: 20
        DBInstanceClass: db.t2.micro
        Engine: mysql
        EngineVersion: 8.0.28
        MasterUsername: !Ref DbUsername
        MasterUserPassword: !Ref DbUserPassword
        BackupRetentionPeriod: 7
        AutoMinorVersionUpgrade: true
        PubliclyAccessible: false
        StorageType: gp2
        Port: 3306
        DBSubnetGroupName: !Ref TaskDRdsSubnetGroup
        VPCSecurityGroups: 
          - !Ref TaskDVPCSecurityGroup
        AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: AWS::Region
        DBName: !Ref DbName
        Tags: 
          - Key: Name
            Value: TaskD RDS instance

  #Launch template
  TaskDLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: TaskDLaunchTemplate
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !Ref InstanceProfileArn
        DisableApiTermination: true
        ImageId: !Ref AmazonLinuxAMIID
        InstanceType: t2.micro
        KeyName: !Ref KeyPair
        SecurityGroupIds:
          - !Ref TaskDWebsiteSecurityGroup
        UserData:
          Fn::Base64:
            Fn::Join:
            - ''
            - - "#!/bin/bash \n"
              #Update software software and install Apache web server
              - "sudo yum update -y \n" #Update software on the instance
              - "sudo yum install -y wget \n" #Install wget
              - "sudo yum install -y httpd \n" #Install Apache web server
              - "sudo systemctl start httpd \n" #Start the web server
              - "sudo systemctl enable httpd \n" #Enable the web server to start when ever system boost
              - "sudo amazon-linux-extras install php8.0 mariadb10.5 \n" #Install wget

              #Install and enable ssm agent
              - "sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm \n"
              - "sudo systemctl start amazon-ssm-agent \n"
              - "sudo systemctl enable amazon-ssm-agent \n"

              #Install DynamicWeb source code and unzip it
              - "cd /var/www/html \n"
              - "sudo wget https://publicsourcecodefordownloading.s3.amazonaws.com/DynamicWeb.zip \n"
              - "sudo unzip DynamicWeb.zip \n"
  
  #Set up parameter store
  DatabaseUsername:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /student/username
      Type: String
      Value: !Ref DbUsername
      Description: Database user name

  DatabasePassword:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /student/password
      Type: String
      Value: !Ref DbUserPassword
      Description: Database user password

  DatabaseName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /student/database
      Type: String
      Value: !Ref DbName
      Description: Database name

  DatabaseEndpoint:
    Type: AWS::SSM::Parameter
    DependsOn:
      - TaskDRdsInstance
    Properties:
      Name: /student/endpoint
      Type: String
      Value: !GetAtt TaskDRdsInstance.Endpoint.Address
      Description: RDS Database endpoint

  # Target group
  TaskDTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - TaskDRdsInstance
      - TaskDVPC
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref TaskDVPC
      TargetType: instance

  # Load balancer security group
  TaskDElbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: TaskDVPC
    Properties:
      GroupName: TaskD ELB SG
      GroupDescription: Enable access to Load Balancer
      VpcId: !Ref TaskDVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: TaskD ELB SG

  # Load balancer
  TaskDLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - TaskDPublicSubnet1
      - TaskDPublicSubnet2
      - TaskDElbSecurityGroup
    Properties:
      Subnets: 
        - !Ref TaskDPublicSubnet1
        - !Ref TaskDPublicSubnet2
      SecurityGroups: 
        - !Ref TaskDElbSecurityGroup

  # Load balancer listener
  TaskDElbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - TaskDTargetGroup
      - TaskDLoadBalancer
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TaskDTargetGroup
      LoadBalancerArn: !Ref TaskDLoadBalancer
      Port: '80'
      Protocol: HTTP

  # Auto scaling group
  TaskDAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - TaskDPublicSubnet1
      - TaskDPublicSubnet2
      - TaskDLaunchTemplate
      - TaskDTargetGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref TaskDPublicSubnet1
        - !Ref TaskDPublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref TaskDLaunchTemplate
        Version: !GetAtt TaskDLaunchTemplate.LatestVersionNumber
      MaxSize: '4'
      MinSize: '2'
      TargetGroupARNs:
        - !Ref TaskDTargetGroup
      Tags:
        - Key: Name
          Value: Dynamic Web Server
          PropagateAtLaunch: true


# #!/bin/bash
# sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
# sudo systemctl start amazon-ssm-agent
# sudo systemctl enable amazon-ssm-agent